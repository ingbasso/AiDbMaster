@{
    ViewData["Title"] = "Gestione Ordini";
}

@section Styles {
    <style>
        /* Stili per la griglia dinamica */
        .data-grid {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            font-size: 14px;
        }

        .data-grid th, .data-grid td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
            color: #333;
        }

        .data-grid th {
            background-color: #f2f2f2;
            font-weight: bold;
            cursor: pointer;
            position: relative;
        }

        .data-grid th:hover {
            background-color: #e8e8e8;
        }

        .data-grid th.sortable::after {
            content: '↕';
            float: right;
            color: #999;
        }

        .data-grid th.sort-asc::after {
            content: '↑';
            color: #007bff;
        }

        .data-grid th.sort-desc::after {
            content: '↓';
            color: #007bff;
        }

        .data-grid tbody tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .data-grid tbody tr:hover {
            background-color: #e8f4f8;
        }

        .grid-controls {
            margin-bottom: 15px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        .grid-search {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            min-width: 200px;
        }

        .grid-info {
            color: #666;
            font-size: 12px;
        }

        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 20px 0;
            gap: 5px;
        }

        .pagination button {
            padding: 5px 10px;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
        }

        .pagination button:hover {
            background: #f5f5f5;
        }

        .pagination button.active {
            background: #007bff;
            color: white;
        }

        .pagination button:disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }

        .export-buttons {
            display: flex;
            gap: 10px;
        }

        .export-buttons button {
            padding: 5px 10px;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            border-radius: 4px;
        }

        .export-buttons button:hover {
            background: #f5f5f5;
        }

        /* Stili per le finestre popup */
        .floating-window {
            position: fixed;
            width: 80%;
            max-width: 1200px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            z-index: 1000;
            display: flex;
            flex-direction: column;
            max-height: 90vh;
            transition: all 0.3s ease;
        }

        .floating-window.minimized {
            height: 50px;
            overflow: hidden;
        }

        .floating-window.maximized {
            width: 95% !important;
            height: 95vh !important;
            top: 2.5vh !important;
            left: 2.5% !important;
            transform: none !important;
            z-index: 2000 !important;
        }

        .window-header {
            padding: 1rem;
            border-top-left-radius: 8px;
            border-top-right-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            cursor: move;
            user-select: none;
            background: #007bff;
            color: white;
        }

        .window-body {
            padding: 1rem;
            overflow-y: auto;
            flex-grow: 1;
            transition: all 0.3s ease;
        }

        .window-footer {
            padding: 1rem;
            border-top: 1px solid #dee2e6;
            transition: all 0.3s ease;
        }

        .window-controls {
            display: flex;
            align-items: center;
        }

        .window-controls .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            z-index: 2001;
        }

        .grid-container {
            height: 100%;
            overflow: auto;
        }
    </style>
}

<div class="container mt-4">
    <h2>Gestione Ordini</h2>
    
    <div class="row mt-4">
        <div class="col-md-12">
            <div class="form-group mb-3">
                <label for="naturalLanguageInput">Descrivi cosa vuoi vedere (in italiano):</label>
                <textarea class="form-control" id="naturalLanguageInput" rows="2" placeholder="Es: Mostrami elenco Clienti con ordini dal consegnare."></textarea>
            </div>

            <div class="form-group mb-3" style="display: none;">
                <label for="promptInput">Prompt inviato all'AI:</label>
                <textarea class="form-control" id="promptInput" rows="4" readonly></textarea>
            </div>

            <div class="form-group mb-3" style="display: none;">
                <label for="testoInput">Query SQL generata:</label>
                <textarea class="form-control" id="testoInput" rows="4" readonly></textarea>
            </div>
            
            <div class="mt-3 d-flex justify-content-between align-items-center">
                <div>
                    <button class="btn btn-primary" id="startRecording">
                        <i class="bi bi-mic-fill"></i> Richiesta
                    </button>
                    <button class="btn btn-danger" id="stopRecording" style="display: none;">
                        <i class="bi bi-stop-fill"></i> Fine Richiesta
                    </button>
                    <button class="btn btn-success" id="executeQuery">
                        <i class="bi bi-table"></i> Crea Griglia
                    </button>
                </div>
                <div>
                    <button class="btn btn-warning" id="clearQuery">
                        <i class="bi bi-trash-fill"></i> Cancella Query
                    </button>
                </div>
                <button class="btn btn-info" id="generateQuery" style="display: none;">
                    <i class="bi bi-magic"></i> Genera Query
                </button>
            </div>

            <div class="mt-4">
                <div id="errorMessage" class="alert alert-danger mt-3" style="display: none;"></div>
            </div>
        </div>
    </div>
</div>

<!-- Template per la finestra della griglia -->
<template id="gridWindowTemplate">
    <div class="floating-window">
        <div class="window-header">
            <h5 class="window-title">Risultati Query</h5>
            <div class="window-controls">
                <button type="button" class="btn btn-light btn-sm me-2 minimize-window">
                    <i class="bi bi-dash-lg"></i>
                </button>
                <button type="button" class="btn btn-light btn-sm me-2 maximize-window">
                    <i class="bi bi-arrows-fullscreen"></i>
                </button>
                <button type="button" class="btn btn-light btn-sm me-2" onclick="window.scrollTo({top: 0, behavior: 'smooth'})">
                    <i class="bi bi-arrow-up-circle"></i> Torna in alto
                </button>
                <button type="button" class="btn-close btn-close-white" aria-label="Close"></button>
            </div>
        </div>
        <div class="window-body">
            <div class="grid-container">
                <div class="grid-controls">
                    <div class="d-flex align-items-center gap-2">
                        <input type="text" class="grid-search" placeholder="Cerca nei dati...">
                        <div class="grid-info">
                            <span class="total-records">0</span> record trovati
                        </div>
                    </div>
                    <div class="export-buttons">
                        <button class="export-csv">
                            <i class="bi bi-file-earmark-text"></i> Esporta CSV
                        </button>
                        <button class="export-excel">
                            <i class="bi bi-file-earmark-spreadsheet"></i> Esporta Excel
                        </button>
                        <button class="print-grid">
                            <i class="bi bi-printer"></i> Stampa
                        </button>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="data-grid">
                        <thead></thead>
                        <tbody></tbody>
                    </table>
                </div>
                <div class="pagination">
                    <!-- Paginazione dinamica -->
                </div>
            </div>
        </div>
        <div class="window-footer">
            <button type="button" class="btn btn-secondary close-window">Chiudi</button>
        </div>
    </div>
</template>

@section Scripts {
    <script>
        // Variabili globali
        let currentData = [];
        let activeGrids = new Map();
        let windowCounter = 0;

        // Elementi del DOM
        const naturalLanguageInput = document.getElementById('naturalLanguageInput');
        const promptInput = document.getElementById('promptInput');
        const textArea = document.getElementById('testoInput');
        const startButton = document.getElementById('startRecording');
        const stopButton = document.getElementById('stopRecording');
        const executeButton = document.getElementById('executeQuery');
        const clearButton = document.getElementById('clearQuery');
        const generateButton = document.getElementById('generateQuery');
        const errorMessage = document.getElementById('errorMessage');

        // Funzioni principali
        async function generateQuery() {
            const query = naturalLanguageInput.value.trim();
            if (!query) {
                showError('Inserisci una descrizione di cosa vuoi vedere');
                return;
            }

            try {
                generateButton.disabled = true;
                const response = await fetch('/AIQuery/ConvertToSQL', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        query: query, 
                        source: 'gestioneordini' 
                    })
                });

                if (!response.ok) {
                    throw new Error(`Errore HTTP: ${response.status}`);
                }

                const result = await response.json();
                if (result.success) {
                    const cleanQuery = result.query
                        .replace(/\/\*[\s\S]*?\*\/|\/\/.*/g, '')
                        .replace(/--.*$/gm, '')
                        .replace(/^\s*[\r\n]/gm, '')
                        .trim();
                    textArea.value = cleanQuery;
                    promptInput.value = result.prompt || 'Prompt non disponibile';
                    errorMessage.style.display = 'none';
                } else {
                    showError(result.error || 'Errore nella generazione della query');
                }
            } catch (error) {
                showError('Errore durante la generazione della query: ' + error.message);
            } finally {
                generateButton.disabled = false;
            }
        }

        async function executeQuery() {
            const query = textArea.value.trim();
            if (!query) {
                showError('Inserisci una query SQL');
                return;
            }

            try {
                executeButton.disabled = true;
                const response = await fetch('/GestioneOrdini/ExecuteQuery', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(query)
                });

                const result = await response.json();
                if (result.success) {
                    currentData = result.data;
                    createDataGrid();
                } else {
                    showError(result.error);
                }
            } catch (error) {
                showError('Errore nell\'esecuzione della query: ' + error.message);
            } finally {
                executeButton.disabled = false;
            }
        }

        function createDataGrid() {
            if (!currentData || currentData.length === 0) {
                showError('Nessun dato trovato');
                return;
            }

            const windowElement = createNewGridWindow();
            const gridContainer = new DataGrid(windowElement, currentData);
            
            // Salva il riferimento alla griglia
            activeGrids.set(windowElement.id, gridContainer);

            // Pulisci i campi di input
            naturalLanguageInput.value = '';
            promptInput.value = '';
            textArea.value = '';
        }

        function createNewGridWindow() {
            const template = document.getElementById('gridWindowTemplate');
            const windowElement = template.content.cloneNode(true).firstElementChild;
            
            windowCounter++;
            windowElement.id = `gridWindow${windowCounter}`;
            
            // Posiziona la finestra casualmente
            const randomX = Math.random() * (window.innerWidth - 800);
            const randomY = Math.random() * (window.innerHeight - 600);
            windowElement.style.left = `${randomX}px`;
            windowElement.style.top = `${randomY}px`;

            // Event listeners per i controlli della finestra
            const closeButtons = windowElement.querySelectorAll('.btn-close, .close-window');
            closeButtons.forEach(closeButton => {
                closeButton.addEventListener('click', () => {
                    const grid = activeGrids.get(windowElement.id);
                    if (grid) {
                        activeGrids.delete(windowElement.id);
                    }
                    windowElement.remove();
                });
            });

            const minimizeButton = windowElement.querySelector('.minimize-window');
            const maximizeButton = windowElement.querySelector('.maximize-window');
            
            minimizeButton.addEventListener('click', () => {
                windowElement.classList.toggle('minimized');
                minimizeButton.querySelector('i').classList.toggle('bi-dash-lg');
                minimizeButton.querySelector('i').classList.toggle('bi-arrows-angle-expand');
            });

            maximizeButton.addEventListener('click', () => {
                windowElement.classList.toggle('maximized');
                maximizeButton.querySelector('i').classList.toggle('bi-arrows-fullscreen');
                maximizeButton.querySelector('i').classList.toggle('bi-arrows-angle-contract');
            });

            // Rendi la finestra trascinabile
            makeWindowDraggable(windowElement);

            // Aggiungi la finestra al documento
            document.body.appendChild(windowElement);

            return windowElement;
        }

        function makeWindowDraggable(windowElement) {
            const header = windowElement.querySelector('.window-header');
            let isDragging = false;
            let currentX;
            let currentY;
            let initialX;
            let initialY;
            let xOffset = 0;
            let yOffset = 0;

            const dragStart = (e) => {
                if (e.target.closest('.btn')) return;
                
                initialX = e.clientX - xOffset;
                initialY = e.clientY - yOffset;

                if (e.target === header || header.contains(e.target)) {
                    isDragging = true;
                    windowElement.style.zIndex = '2000';
                }
            };

            const drag = (e) => {
                if (isDragging && !windowElement.classList.contains('maximized')) {
                    e.preventDefault();
                    
                    currentX = e.clientX - initialX;
                    currentY = e.clientY - initialY;

                    xOffset = currentX;
                    yOffset = currentY;

                    windowElement.style.transform = `translate3d(${currentX}px, ${currentY}px, 0)`;
                }
            };

            const dragEnd = (e) => {
                initialX = currentX;
                initialY = currentY;
                isDragging = false;
                if (!windowElement.classList.contains('maximized')) {
                    windowElement.style.zIndex = '1000';
                }
            };

            header.addEventListener('mousedown', dragStart);
            document.addEventListener('mousemove', drag);
            document.addEventListener('mouseup', dragEnd);
        }

        // Classe per gestire la griglia dati
        class DataGrid {
            constructor(windowElement, data) {
                this.windowElement = windowElement;
                this.originalData = data;
                this.filteredData = [...data];
                this.currentPage = 1;
                this.pageSize = 50;
                this.sortColumn = null;
                this.sortDirection = 'asc';
                
                this.init();
            }

            init() {
                this.setupEventListeners();
                this.render();
                this.updateTitle();
            }

            setupEventListeners() {
                const searchInput = this.windowElement.querySelector('.grid-search');
                const exportCsvButton = this.windowElement.querySelector('.export-csv');
                const exportExcelButton = this.windowElement.querySelector('.export-excel');
                const printButton = this.windowElement.querySelector('.print-grid');

                searchInput.addEventListener('input', (e) => {
                    this.search(e.target.value);
                });

                exportCsvButton.addEventListener('click', () => {
                    this.exportToCSV();
                });

                exportExcelButton.addEventListener('click', () => {
                    this.exportToExcel();
                });

                printButton.addEventListener('click', () => {
                    this.printGrid();
                });
            }

            search(query) {
                if (!query.trim()) {
                    this.filteredData = [...this.originalData];
                } else {
                    this.filteredData = this.originalData.filter(row => {
                        return Object.values(row).some(value => 
                            value && value.toString().toLowerCase().includes(query.toLowerCase())
                        );
                    });
                }
                this.currentPage = 1;
                this.render();
            }

            sort(column) {
                if (this.sortColumn === column) {
                    this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
                } else {
                    this.sortColumn = column;
                    this.sortDirection = 'asc';
                }

                this.filteredData.sort((a, b) => {
                    let aVal = a[column];
                    let bVal = b[column];
                    
                    // Gestione valori null/undefined
                    if (aVal == null) aVal = '';
                    if (bVal == null) bVal = '';
                    
                    // Controlla se sono numeri
                    if (!isNaN(aVal) && !isNaN(bVal)) {
                        aVal = parseFloat(aVal);
                        bVal = parseFloat(bVal);
                    }
                    
                    // Controlla se sono date
                    if (Date.parse(aVal) && Date.parse(bVal)) {
                        aVal = new Date(aVal);
                        bVal = new Date(bVal);
                    }

                    if (this.sortDirection === 'asc') {
                        return aVal > bVal ? 1 : -1;
                    } else {
                        return aVal < bVal ? 1 : -1;
                    }
                });

                this.render();
            }

            render() {
                this.renderTable();
                this.renderPagination();
                this.updateInfo();
            }

            renderTable() {
                const table = this.windowElement.querySelector('.data-grid');
                const thead = table.querySelector('thead');
                const tbody = table.querySelector('tbody');

                // Pulisci contenuto esistente
                thead.innerHTML = '';
                tbody.innerHTML = '';

                if (this.filteredData.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="100%" class="text-center">Nessun dato trovato</td></tr>';
                    return;
                }

                // Crea header
                const headerRow = document.createElement('tr');
                const columns = Object.keys(this.filteredData[0]);
                
                columns.forEach(column => {
                    const th = document.createElement('th');
                    th.textContent = column;
                    th.className = 'sortable';
                    th.addEventListener('click', () => this.sort(column));
                    
                    if (this.sortColumn === column) {
                        th.classList.add(`sort-${this.sortDirection}`);
                    }
                    
                    headerRow.appendChild(th);
                });
                thead.appendChild(headerRow);

                // Crea righe dati
                const startIndex = (this.currentPage - 1) * this.pageSize;
                const endIndex = startIndex + this.pageSize;
                const pageData = this.filteredData.slice(startIndex, endIndex);

                pageData.forEach(row => {
                    const tr = document.createElement('tr');
                    columns.forEach(column => {
                        const td = document.createElement('td');
                        let value = row[column];
                        
                        // Formatta i valori
                        if (value != null) {
                            if (typeof value === 'number') {
                                if (Number.isInteger(value)) {
                                    value = value.toLocaleString('it-IT');
                                } else {
                                    value = value.toLocaleString('it-IT', {
                                        minimumFractionDigits: 2,
                                        maximumFractionDigits: 2
                                    });
                                }
                            } else if (Date.parse(value)) {
                                const date = new Date(value);
                                value = date.toLocaleDateString('it-IT');
                            }
                        } else {
                            value = '';
                        }
                        
                        td.textContent = value;
                        tr.appendChild(td);
                    });
                    tbody.appendChild(tr);
                });
            }

            renderPagination() {
                const paginationContainer = this.windowElement.querySelector('.pagination');
                paginationContainer.innerHTML = '';

                const totalPages = Math.ceil(this.filteredData.length / this.pageSize);
                
                if (totalPages <= 1) return;

                // Pulsante precedente
                const prevButton = document.createElement('button');
                prevButton.textContent = '‹';
                prevButton.disabled = this.currentPage === 1;
                prevButton.addEventListener('click', () => {
                    if (this.currentPage > 1) {
                        this.currentPage--;
                        this.render();
                    }
                });
                paginationContainer.appendChild(prevButton);

                // Numeri di pagina
                for (let i = 1; i <= totalPages; i++) {
                    const pageButton = document.createElement('button');
                    pageButton.textContent = i;
                    pageButton.className = i === this.currentPage ? 'active' : '';
                    pageButton.addEventListener('click', () => {
                        this.currentPage = i;
                        this.render();
                    });
                    paginationContainer.appendChild(pageButton);
                }

                // Pulsante successivo
                const nextButton = document.createElement('button');
                nextButton.textContent = '›';
                nextButton.disabled = this.currentPage === totalPages;
                nextButton.addEventListener('click', () => {
                    if (this.currentPage < totalPages) {
                        this.currentPage++;
                        this.render();
                    }
                });
                paginationContainer.appendChild(nextButton);
            }

            updateInfo() {
                const totalRecords = this.windowElement.querySelector('.total-records');
                totalRecords.textContent = this.filteredData.length;
            }

            updateTitle() {
                const title = this.windowElement.querySelector('.window-title');
                title.textContent = `Risultati Query (${this.originalData.length} record)`;
            }

            exportToCSV() {
                const columns = Object.keys(this.filteredData[0]);
                let csvContent = columns.join(',') + '\n';
                
                this.filteredData.forEach(row => {
                    const values = columns.map(col => {
                        let value = row[col];
                        if (value == null) value = '';
                        if (typeof value === 'string' && value.includes(',')) {
                            value = `"${value}"`;
                        }
                        return value;
                    });
                    csvContent += values.join(',') + '\n';
                });

                this.downloadFile(csvContent, 'dati.csv', 'text/csv');
            }

            exportToExcel() {
                // Implementazione semplificata - in produzione useresti una libreria come SheetJS
                this.exportToCSV(); // Per ora esporta come CSV
            }

            printGrid() {
                const printWindow = window.open('', '_blank');
                const table = this.windowElement.querySelector('.data-grid').outerHTML;
                
                printWindow.document.write(`
                    <html>
                        <head>
                            <title>Stampa Griglia Dati</title>
                            <style>
                                body { font-family: Arial, sans-serif; }
                                table { border-collapse: collapse; width: 100%; }
                                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                                th { background-color: #f2f2f2; }
                            </style>
                        </head>
                        <body>
                            <h2>Gestione Ordini - Risultati Query</h2>
                            ${table}
                        </body>
                    </html>
                `);
                
                printWindow.document.close();
                printWindow.print();
            }

            downloadFile(content, filename, mimeType) {
                const blob = new Blob([content], { type: mimeType });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }
        }

        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
        }

        function clearQuery() {
            naturalLanguageInput.value = '';
            promptInput.value = '';
            textArea.value = '';
            errorMessage.style.display = 'none';
        }

        // Variabili per registrazione vocale
        let recognition = null;
        let isRecording = false;

        // Inizializza il riconoscimento vocale
        function initSpeechRecognition() {
            if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
                recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
                
                recognition.lang = 'it-IT';
                recognition.continuous = true;
                recognition.interimResults = true;
                recognition.maxAlternatives = 1;

                recognition.onstart = function() {
                    console.log('Riconoscimento vocale iniziato');
                    isRecording = true;
                    startButton.style.display = 'none';
                    stopButton.style.display = 'inline-block';
                    startButton.disabled = true;
                    naturalLanguageInput.placeholder = 'Sto ascoltando...';
                };

                recognition.onresult = function(event) {
                    let interimTranscript = '';
                    let finalTranscript = '';

                    for (let i = event.resultIndex; i < event.results.length; i++) {
                        const transcript = event.results[i][0].transcript;
                        if (event.results[i].isFinal) {
                            finalTranscript += transcript;
                        } else {
                            interimTranscript += transcript;
                        }
                    }

                    // Aggiorna il campo con il testo riconosciuto
                    naturalLanguageInput.value = finalTranscript + interimTranscript;
                };

                recognition.onerror = function(event) {
                    console.error('Errore riconoscimento vocale:', event.error);
                    showError('Errore nel riconoscimento vocale: ' + event.error);
                    stopRecording();
                };

                recognition.onend = function() {
                    console.log('Riconoscimento vocale terminato');
                    isRecording = false;
                    startButton.style.display = 'inline-block';
                    stopButton.style.display = 'none';
                    startButton.disabled = false;
                    naturalLanguageInput.placeholder = 'Es: Mostrami tutti gli ordini del cliente \'Rossi Mario\' con data ordine maggiore di gennaio 2024';
                };

                return true;
            } else {
                console.warn('Riconoscimento vocale non supportato');
                startButton.disabled = true;
                startButton.title = 'Riconoscimento vocale non supportato dal browser';
                return false;
            }
        }

        // Funzioni per registrazione vocale
        function startRecording() {
            if (!recognition) {
                if (!initSpeechRecognition()) {
                    showError('Riconoscimento vocale non supportato dal browser');
                    return;
                }
            }

            if (!isRecording) {
                try {
                    recognition.start();
                } catch (error) {
                    console.error('Errore avvio riconoscimento:', error);
                    showError('Errore nell\'avvio del riconoscimento vocale');
                }
            }
        }

        function stopRecording() {
            if (recognition && isRecording) {
                recognition.stop();
            }
        }

        // Event Listeners
        startButton.addEventListener('click', startRecording);
        stopButton.addEventListener('click', stopRecording);
        executeButton.addEventListener('click', async function (e) {
            e.preventDefault();
            await generateQuery();
            await executeQuery();
        });
        clearButton.addEventListener('click', clearQuery);
        generateButton.addEventListener('click', generateQuery);

        // Inizializzazione quando la pagina si carica
        document.addEventListener('DOMContentLoaded', function() {
            // Verifica se il riconoscimento vocale è supportato
            initSpeechRecognition();
        });

        // Pulizia quando si cambia pagina
        window.addEventListener('beforeunload', () => {
            // Ferma il riconoscimento vocale se attivo
            if (recognition && isRecording) {
                recognition.stop();
            }
            
            activeGrids.forEach((grid, windowId) => {
                const window = document.getElementById(windowId);
                if (window) {
                    window.remove();
                }
            });
            activeGrids.clear();
        });
    </script>
} 