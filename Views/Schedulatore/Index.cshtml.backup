@{
    ViewData["Title"] = "Schedulatore di Produzione";
    ViewBag.UseFluidContainer = true;
}

@section Styles {
    <link href="https://cdn.syncfusion.com/ej2/31.1.17/material.css" rel="stylesheet" />
    <style>
        .scheduler-container {
            height: calc(100vh - 200px);
            min-height: 600px;
            width: 100%;
            margin-bottom: 3rem;
        }
        
        /* Assicura che lo scheduler Syncfusion occupi tutto lo spazio */
        #scheduler {
            width: 100% !important;
            height: 100% !important;
        }
        
        /* Stili per header settimana */
        .week-header-content {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 8px 4px;
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            font-weight: bold;
            font-size: 0.9rem;
            border-radius: 4px 4px 0 0;
        }
        
        .week-label {
            text-shadow: 0 1px 2px rgba(0,0,0,0.2);
        }
        
        /* Stili per header giorno */
        .day-header-content {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 6px 4px;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            min-width: 70px;
        }
        
        .day-compact {
            font-weight: bold;
            font-size: 0.9rem;
            color: #495057;
            text-align: center;
            white-space: nowrap;
        }
        
        /* Stili legacy per compatibilità */
        .day-number {
            font-weight: bold;
            font-size: 1rem;
            color: #495057;
            line-height: 1;
        }
        
        .day-name {
            font-size: 0.75rem;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-top: 2px;
        }
        
        /* Stili per header ora */
        .hour-header-content {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 4px;
            background: #ffffff;
            border-right: 1px solid #e9ecef;
            min-width: 60px;
            font-size: 0.8rem;
            font-weight: 500;
            color: #495057;
        }
        
        .hour-label {
            font-family: 'Courier New', monospace;
        }
        
        /* Stili per slot temporali */
        .time-slot-content {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2px;
            font-size: 0.7rem;
            color: #6c757d;
        }
        
        .time-label {
            font-family: 'Courier New', monospace;
            font-weight: 500;
        }
        
        /* Stili per timeline con intervalli di 8 ore */
        .e-schedule .e-timeline-view .e-date-header-wrap .e-header-cells {
            min-width: 120px;
        }
        
        /* Stili per eventi (ordini di lavoro) */
        .e-schedule .e-appointment {
            min-height: 50px !important;
            height: auto !important;
            padding: 8px !important;
            border-radius: 6px !important;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
            font-size: 0.85rem !important;
            line-height: 1.3 !important;
        }
        
        /* Contenuto degli eventi */
        .e-schedule .e-appointment .e-subject {
            font-weight: bold !important;
            margin-bottom: 4px !important;
            overflow: visible !important;
            white-space: normal !important;
        }
        
        /* Altezza righe delle risorse (centri di lavoro) */
        .e-schedule .e-timeline-view .e-content-table tbody tr {
            height: 80px !important;
        }
        
        /* Spazio tra gli eventi sovrapposti */
        .e-schedule .e-appointment.e-appointment-border {
            margin-bottom: 2px !important;
        }
        
        /* Stili responsivi per altezza eventi */
        @@media (max-width: 768px) {
            .e-schedule .e-appointment {
                min-height: 40px !important;
                font-size: 0.75rem !important;
                padding: 6px !important;
            }
            
            .e-schedule .e-timeline-view .e-content-table tbody tr {
                height: 60px !important;
            }
        }
        
        /* Vista giorno - eventi più alti */
        .e-schedule.e-timeline-day .e-appointment {
            min-height: 80px !important;
            padding: 12px !important;
        }
        
        /* Vista settimana/2 settimane - eventi medi */
        .e-schedule.e-timeline-week .e-appointment {
            min-height: 60px !important;
            padding: 8px !important;
        }
        
        /* Vista mese - eventi più compatti */
        .e-schedule.e-timeline-month .e-appointment {
            min-height: 45px !important;
            padding: 6px !important;
            font-size: 0.8rem !important;
        }
        
        /* Stili per barra di progressione eventi */
        .event-progress-container {
            transition: all 0.2s ease !important;
        }
        
        .event-progress-bar {
            animation: progressPulse 2s ease-in-out infinite alternate !important;
        }
        
        /* Animazione per barre di progressione incomplete */
        @@keyframes progressPulse {
            0% { opacity: 0.8; }
            100% { opacity: 1; }
        }
        
        /* Hover effect sulla barra di progressione */
        .e-appointment:hover .event-progress-container {
            transform: scaleY(1.2) !important;
            box-shadow: inset 0 1px 3px rgba(0,0,0,0.2) !important;
        }
        
        /* Stili responsivi per barra di progressione */
        @@media (max-width: 768px) {
            .event-progress-container {
                height: 6px !important;
            }
        }
        
        /* Barra di progressione bianca per tutti gli eventi */
        .event-progress-bar {
            background: rgba(255,255,255,0.9) !important;
        }
        
        /* Effetto per eventi completati (100%) */
        .event-progress-bar[style*="width: 100%"] {
            background: rgba(255,255,255,1) !important;
            box-shadow: 0 0 3px rgba(255,255,255,0.6) !important;
        }
        
        /* Stili per modal personalizzato senza backdrop */
        #orderDetailsModal {
            z-index: 1060 !important;
        }
        
        /* Modal senza backdrop - aggiungi ombra per evidenziarlo */
        #orderDetailsModal .modal-dialog {
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3) !important;
            border: 2px solid #007bff !important;
            border-radius: 8px !important;
            height: auto !important;
            min-height: auto !important;
        }
        
        /* Stili per modal più compatto */
        #orderDetailsModal .modal-body {
            padding: 1rem !important;
            height: auto !important;
            max-height: 80vh !important;
            overflow-y: auto !important;
        }
        
        /* Assicura che il modal content si adatti */
        #orderDetailsModal .modal-content {
            height: auto !important;
            min-height: auto !important;
            max-height: 90vh !important;
            display: flex !important;
            flex-direction: column !important;
        }
        
        /* Posizionamento modal */
        #orderDetailsModal .modal-dialog {
            margin: 4rem auto 2rem auto !important;
            display: flex !important;
            align-items: flex-start !important;
        }
        
        /* Miglioramenti per form più compatto */
        #orderDetailsModal .form-label {
            font-size: 0.85rem !important;
            margin-bottom: 0.2rem !important;
            font-weight: 600 !important;
        }
        
        #orderDetailsModal .form-control,
        #orderDetailsModal .form-select,
        #orderDetailsModal .form-range {
            font-size: 0.85rem !important;
            padding: 0.4rem 0.6rem !important;
        }
        
        #orderDetailsModal textarea.form-control {
            padding: 0.5rem 0.6rem !important;
        }
        
        /* Header e footer più compatti */
        #orderDetailsModal .modal-header {
            padding: 0.75rem 1rem !important;
        }
        
        #orderDetailsModal .modal-footer {
            padding: 0.5rem 1rem !important;
        }
        
        #orderDetailsModal .modal-title {
            font-size: 1.1rem !important;
        }
        
        /* Stili per linee di separazione più compatte */
        #orderDetailsModal hr {
            border-color: #007bff !important;
            opacity: 0.3 !important;
            margin: 0.3rem 0 0.8rem 0 !important;
        }
        
        /* Responsive per modal largo */
        @@media (max-width: 1200px) {
            #orderDetailsModal .modal-dialog {
                width: 95% !important;
                max-width: 95% !important;
            }
        }
        
        @@media (max-width: 768px) {
            #orderDetailsModal .modal-dialog {
                width: 98% !important;
                max-width: 98% !important;
                height: auto !important;
                min-height: auto !important;
                margin: 2rem auto 1rem auto !important;
            }
            
            #orderDetailsModal .modal-body {
                padding: 1rem !important;
                max-height: 85vh !important;
            }
        }
        
        /* Assicura che il modal sia sempre sopra */
        .modal.show {
            z-index: 1060 !important;
        }
        
        /* Non bloccare lo scroll quando il modal è aperto */
        body.modal-open {
            overflow: auto !important;
            padding-right: 0 !important;
        }
        
        /* Rendi il modal trascinabile */
        #orderDetailsModal .modal-header {
            cursor: move;
            user-select: none;
        }
        
        /* Stili per form nel modal */
        #orderDetailsModal .form-label {
            font-weight: 600;
            color: #495057;
        }
        
        #orderDetailsModal .form-control:focus,
        #orderDetailsModal .form-select:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }
        
        /* Stili per sezioni del form */
        #orderDetailsModal h6.text-primary {
            font-size: 1rem;
            font-weight: 600;
        }
        
        /* Stili per slider percentuale */
        #orderDetailsModal .form-range::-webkit-slider-thumb {
            background: #0d6efd;
        }
        
        #orderDetailsModal .form-range::-moz-range-thumb {
            background: #0d6efd;
            border: none;
        }
        
        /* Stili per assicurare che tutte le risorse siano visibili */
        .e-schedule .e-timeline-view .e-resource-left-td {
            min-width: 200px !important;
            width: 200px !important;
        }
        
        .e-schedule .e-timeline-view .e-left-indent-wrap {
            width: 200px !important;
        }
        
        .e-schedule .e-timeline-view .e-resource-cells {
            display: table-cell !important;
            visibility: visible !important;
        }
        
        .resource-header-content {
            padding: 8px;
            font-weight: 500;
        }
        
        .resource-name {
            display: block;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        /* Forza la visualizzazione di tutte le righe delle risorse */
        .e-schedule .e-timeline-view .e-content-table tbody tr {
            display: table-row !important;
            height: auto !important;
            min-height: 50px;
        }
        
        .scheduler-toolbar {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-bottom: 1rem;
        }
        
        
        /* Legenda inline più piccola */
        .scheduler-legend-inline {
            padding: 0.5rem;
            background: rgba(248, 249, 250, 0.8);
            border-radius: 6px;
            border: 1px solid #e9ecef;
        }
        
        .legend-item-small {
            display: flex;
            align-items: center;
            gap: 0.3rem;
            font-size: 0.75rem;
            color: #6c757d;
        }
        
        .legend-color-small {
            width: 10px;
            height: 10px;
            border-radius: 2px;
            flex-shrink: 0;
        }
        
        /* Responsive: nascondi legenda su schermi piccoli */
        @@media (max-width: 768px) {
            .scheduler-legend-inline {
                display: none;
            }
            
            .scheduler-container {
                margin-bottom: 4rem;
            }
        }
        
        .scheduler-stats {
            background: white;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            margin-top: 1rem;
        }
        
        
        /* Personalizzazione Syncfusion Scheduler */
        .e-schedule .e-timeline-view .e-resource-left-td {
            width: 200px;
        }
        
        .e-schedule .e-timeline-view .e-resource-cells {
            border-right: 1px solid #e0e0e0;
        }
        
        .e-schedule .e-appointment {
            border-radius: 4px;
            font-size: 12px;
        }
        
        .e-schedule .e-appointment .e-subject {
            font-weight: 600;
        }
        
        /* Loading overlay */
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        
        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
}

<div class="container-fluid pb-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center gap-4">
            <div>
                <h2><i class="bi bi-calendar3 me-2"></i>Schedulatore di Produzione</h2>
                <p class="text-muted mb-0">Visualizza e gestisci la programmazione degli ordini di produzione per centro di lavoro</p>
            </div>
            <div class="scheduler-legend-inline">
                <h6 class="mb-1 text-muted" style="font-size: 0.8rem;">Stati:</h6>
                <div class="d-flex flex-wrap gap-2">
                    <div class="legend-item-small">
                        <div class="legend-color-small" style="background-color: #FFA500;"></div>
                        <span>Emesso</span>
                    </div>
                    <div class="legend-item-small">
                        <div class="legend-color-small" style="background-color: #1E90FF;"></div>
                        <span>In Produzione</span>
                    </div>
                    <div class="legend-item-small">
                        <div class="legend-color-small" style="background-color: #32CD32;"></div>
                        <span>Chiuso</span>
                    </div>
                    <div class="legend-item-small">
                        <div class="legend-color-small" style="background-color: #FF6347;"></div>
                        <span>Sospeso</span>
                    </div>
                    <div class="legend-item-small">
                        <div class="legend-color-small" style="background-color: #9932CC;"></div>
                        <span>Urgente</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="d-flex gap-2">
            <button type="button" class="btn btn-outline-primary" id="refreshBtn">
                <i class="bi bi-arrow-clockwise me-1"></i>Aggiorna
            </button>
            <button type="button" class="btn btn-primary" id="todayBtn">
                <i class="bi bi-calendar-today me-1"></i>Oggi
            </button>
        </div>
    </div>


    <!-- Container Scheduler -->
    <div class="scheduler-container position-relative">
        <div class="loading-overlay" id="loadingOverlay">
            <div class="loading-spinner"></div>
        </div>
        <div id="scheduler"></div>
    </div>

</div> <!-- chiusura container-fluid -->

<!-- Modal Popup Personalizzato per Dettagli Ordine -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true" data-bs-backdrop="true" data-bs-keyboard="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable" style="max-width: 90%; width: 1200px; margin-top: 4rem;">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="orderDetailsModalLabel">
                    <i class="bi bi-box me-2"></i>Dettagli Ordine di Produzione
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="orderDetailsForm">
                    <!-- Sezione Informazioni Prodotto -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <hr class="text-primary mb-2">
                        </div>
                        <div class="col-md-4 mb-2">
                            <label for="orderCodiceArticolo" class="form-label">Codice Articolo</label>
                            <input type="text" class="form-control" id="orderCodiceArticolo" readonly>
                        </div>
                        <div class="col-md-4 mb-2">
                            <label for="orderQuantita" class="form-label">Quantità</label>
                            <input type="number" class="form-control" id="orderQuantita">
                        </div>
                        <div class="col-md-4 mb-2">
                            <label for="orderIdListaOP" class="form-label">ID Ordine</label>
                            <input type="text" class="form-control" id="orderIdListaOPDisplay" readonly>
                        </div>
                    </div>

                    <!-- Sezione Date e Tempi -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <hr class="text-primary mb-2">
                        </div>
                        <div class="col-lg-4 mb-2">
                            <label for="orderDataInizio" class="form-label">Data Inizio</label>
                            <input type="datetime-local" class="form-control" id="orderDataInizio">
                        </div>
                        <div class="col-lg-4 mb-2">
                            <label for="orderDataFine" class="form-label">Data Fine</label>
                            <input type="datetime-local" class="form-control" id="orderDataFine">
                        </div>
                        <div class="col-lg-4 mb-2">
                            <label for="orderDataFinePrevista" class="form-label">Data Fine Prevista</label>
                            <input type="datetime-local" class="form-control" id="orderDataFinePrevista">
                        </div>
                    </div>

                    <!-- Sezione Produzione -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <hr class="text-primary mb-2">
                        </div>
                        <div class="col-lg-4 mb-2">
                            <label for="orderCentroLavoro" class="form-label">Centro di Lavoro</label>
                            <select class="form-select" id="orderCentroLavoro">
                                <option value="">Seleziona Centro di Lavoro</option>
                            </select>
                        </div>
                        <div class="col-lg-4 mb-2">
                            <label for="orderStato" class="form-label">Stato</label>
                            <select class="form-select" id="orderStato">
                                <option value="1">Emesso</option>
                                <option value="2">In Produzione</option>
                                <option value="3">Chiuso</option>
                                <option value="4">Sospeso</option>
                                <option value="5">Urgente</option>
                            </select>
                        </div>
                        <div class="col-lg-4 mb-2">
                            <label for="orderPriorita" class="form-label">Priorità</label>
                            <select class="form-select" id="orderPriorita">
                                <option value="1">Bassa</option>
                                <option value="2">Normale</option>
                                <option value="3">Alta</option>
                                <option value="4">Urgente</option>
                            </select>
                        </div>
                        <div class="col-12 mb-2">
                            <label for="orderPercentuale" class="form-label">Percentuale Completamento (%)</label>
                            <div class="row align-items-center">
                                <div class="col-8">
                                    <input type="range" class="form-range" id="orderPercentualeRange" min="0" max="100" step="5">
                                </div>
                                <div class="col-4">
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="orderPercentuale" min="0" max="100">
                                        <span class="input-group-text">%</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Sezione Note e Dettagli -->
                    <div class="row mb-2">
                        <div class="col-12">
                            <hr class="text-primary mb-2">
                        </div>
                        <div class="col-lg-6 mb-2">
                            <label for="orderNote" class="form-label">Note</label>
                            <textarea class="form-control" id="orderNote" rows="2" placeholder="Inserisci note aggiuntive..."></textarea>
                        </div>
                        <div class="col-lg-6 mb-2">
                            <label for="orderDescrizione" class="form-label">Descrizione Articolo</label>
                            <textarea class="form-control" id="orderDescrizione" rows="2" placeholder="Descrizione dettagliata..."></textarea>
                        </div>
                    </div>

                    <!-- Campo ID nascosto -->
                    <input type="hidden" id="orderIdListaOP">
                </form>
            </div>
            <div class="modal-footer py-2">
                <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle me-1"></i>Annulla
                </button>
                <button type="button" class="btn btn-primary btn-sm" id="saveOrderChanges">
                    <i class="bi bi-check-circle me-1"></i>Salva Modifiche
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Template per header settimana -->
<script id="weekHeaderTemplate" type="text/x-template">
    <div class="week-header-content">
        <span class="week-label">Week ${getWeekNumber(data.date)}</span>
    </div>
</script>

<!-- Template per header giorno -->
<script id="dayHeaderTemplate" type="text/x-template">
    <div class="day-header-content">
        <span class="day-compact">${data.date.getDate()} ${getDayNameShort(data.date)}</span>
    </div>
</script>

<!-- Template per header ora -->
<script id="hourHeaderTemplate" type="text/x-template">
    <div class="hour-header-content">
        <span class="hour-label">${formatHour(data.date)}</span>
    </div>
</script>

<!-- Template per slot temporali -->
<script id="timeSlotTemplate" type="text/x-template">
    <div class="time-slot-content">
        <span class="time-label">${formatHour(data.date)}</span>
    </div>
</script>

<!-- Template per header risorse -->
<script id="resourceHeaderTemplate" type="text/x-template">
    <div class="resource-header-content">
        <span class="resource-name">${data.resourceData.Name}</span>
    </div>
</script>

@section Scripts {
    <script>
        // Verifica e registra la licenza Syncfusion
        if (typeof ej !== 'undefined' && ej.base) {
            ej.base.License = "Ngo9BigBOggjHTQxAR8/V1NNaF1cXGJCf1FpRmJGdld5fUVHYVZUTXxaS00DNHVRdkdmWXZeeHVXRGlfUU1wV0FZYUA=";
        } else {
        }
        
        // Variabili globali
        let scheduleObj;
        let centriLavoro = [];
        let ordiniData = [];

        // Funzioni helper per il template
        function getWeekNumber(date) {
            // Calcolo ISO 8601 - versione semplificata e testata
            const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
            
            // Imposta al giovedì della settimana corrente (ISO 8601)
            const dayNum = d.getUTCDay() || 7;
            d.setUTCDate(d.getUTCDate() + 4 - dayNum);
            
            // Calcola il numero di settimana
            const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
            const weekNo = Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
            
            return weekNo;
        }

        function formatDateRange(date) {
            const startOfWeek = new Date(date);
            startOfWeek.setDate(date.getDate() - date.getDay() + 1); // Lunedì
            const endOfWeek = new Date(startOfWeek);
            endOfWeek.setDate(startOfWeek.getDate() + 6); // Domenica
            
            const options = { day: '2-digit', month: '2-digit' };
            return `${startOfWeek.toLocaleDateString('it-IT', options)} - ${endOfWeek.toLocaleDateString('it-IT', options)}`;
        }

        // Funzione per ottenere il nome del giorno abbreviato (italiano)
        function getDayName(date) {
            const days = ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab'];
            return days[date.getDay()];
        }

        // Funzione per ottenere il nome del giorno abbreviato (inglese 3 lettere)
        function getDayNameShort(date) {
            const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            return days[date.getDay()];
        }

        // Funzione per formattare l'ora in base alla vista corrente
        function formatHour(date) {
            const hour = date.getHours();
            
            // Per tutte le viste, mostra solo l'ora in formato 24h
            return String(hour).padStart(2, '0');
        }
        
        // Funzione per formattare l'ora con intervalli specifici (per timeline)
        function formatHourInterval(date, currentView) {
            const hour = date.getHours();
            
            if (currentView === 'TimelineDay') {
                // Vista giorno: mostra tutte le ore
                return String(hour).padStart(2, '0');
            } else {
                // Altre viste: intervalli di 8 ore
                if (hour === 0) return '00';
                if (hour === 8) return '08';
                if (hour === 16) return '16';
                return String(hour).padStart(2, '0');
            }
        }

        // Script per inizializzare i controlli Syncfusion
        document.addEventListener('DOMContentLoaded', function() {
            
            // Forza la registrazione della licenza
            if (typeof ej !== 'undefined' && ej.base) {
                ej.base.License = "Ngo9BigBOggjHTQxAR8/V1NNaF1cXGJCf1FpRmJGdld5fUVHYVZUTXxaS00DNHVRdkdmWXZeeHVXRGlfUU1wV0FZYUA=";
            }
            
            console.log('Inizializzazione Schedulatore...');
            initializeScheduler();
        });

        // Inizializza lo scheduler
        async function initializeScheduler() {
            try {
                showLoading(true);
                
                console.log('=== INIZIO INIZIALIZZAZIONE SCHEDULATORE ===');
                
                // Carica i centri di lavoro
                console.log('Step 1: Caricamento centri di lavoro');
                await loadCentriLavoro();
                
                // Carica gli ordini di produzione
                console.log('Step 2: Caricamento ordini di produzione');
                await loadOrdiniProduzione();
                
                // Crea lo scheduler
                console.log('Step 3: Creazione scheduler');
                createScheduler();
                
                
                // Setup event listeners
                console.log('Step 5: Setup event listeners');
                setupEventListeners();
                
                showLoading(false);
                console.log('=== SCHEDULATORE INIZIALIZZATO CON SUCCESSO ===');
            } catch (error) {
                console.error('=== ERRORE NELL\'INIZIALIZZAZIONE ===');
                console.error('Dettagli errore:', error);
                console.error('Stack trace:', error.stack);
                
                // Mostra un messaggio di errore più dettagliato
                const errorMessage = `Errore nel caricamento dello schedulatore: ${error.message}`;
                showError(errorMessage);
                showLoading(false);
                
                // Aggiungi informazioni di debug nella pagina
                const debugInfo = document.createElement('div');
                debugInfo.className = 'alert alert-danger mt-3';
                debugInfo.innerHTML = `
                    <h5>Informazioni di Debug:</h5>
                    <p><strong>Errore:</strong> ${error.message}</p>
                    <p><strong>Syncfusion caricato:</strong> ${typeof ej !== 'undefined' ? 'Sì' : 'No'}</p>
                    <p><strong>Centri di lavoro:</strong> ${centriLavoro ? centriLavoro.length : 'Non caricati'}</p>
                    <p><strong>Ordini:</strong> ${ordiniData ? ordiniData.length : 'Non caricati'}</p>
                    <details>
                        <summary>Stack Trace</summary>
                        <pre>${error.stack}</pre>
                    </details>
                `;
                document.querySelector('.container-fluid').appendChild(debugInfo);
            }
        }

        // Carica i centri di lavoro
        async function loadCentriLavoro() {
            try {
                console.log('Caricamento centri di lavoro...');
                const response = await fetch('@Url.Action("GetCentriLavoro", "Schedulatore")');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                // Controlla se c'è un errore nella risposta
                if (data.error) {
                    throw new Error(`Errore server: ${data.message}`);
                }
                
                centriLavoro = data;
                console.log('Centri di lavoro caricati:', centriLavoro.length);
                console.log('Dettaglio centri di lavoro:', centriLavoro);
                
                if (centriLavoro.length === 0) {
                    console.warn('Nessun centro di lavoro attivo trovato');
                }
            } catch (error) {
                console.error('Errore nel caricamento dei centri di lavoro:', error);
                throw new Error(`Centri di lavoro: ${error.message}`);
            }
        }

        // Carica gli ordini di produzione
        async function loadOrdiniProduzione() {
            try {
                console.log('Caricamento ordini di produzione...');
                const response = await fetch('@Url.Action("GetOrdiniProduzione", "Schedulatore")');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                // Controlla se c'è un errore nella risposta
                if (data.error) {
                    throw new Error(`Errore server: ${data.message}`);
                }
                
                ordiniData = data;
                console.log('Ordini caricati:', ordiniData.length);
                console.log('Dettaglio ordini (primi 3):', ordiniData.slice(0, 3));
                
                // Verifica la relazione centri di lavoro
                const roomIds = [...new Set(ordiniData.map(o => o.roomId || o.RoomId))];
                console.log('Room IDs negli ordini:', roomIds);
                console.log('Centro IDs disponibili:', centriLavoro.map(c => c.id || c.Id));
                
                // Debug dettagliato dei campi
                console.log('Primo ordine - tutte le proprietà:', Object.keys(ordiniData[0] || {}));
                console.log('Primo centro - tutte le proprietà:', Object.keys(centriLavoro[0] || {}));
                
                if (ordiniData.length === 0) {
                    console.warn('Nessun ordine di produzione trovato nel range di date specificato');
                }
            } catch (error) {
                console.error('Errore nel caricamento degli ordini:', error);
                throw new Error(`Ordini di produzione: ${error.message}`);
            }
        }

        // Crea lo scheduler Syncfusion
        function createScheduler() {
            try {
                console.log('Creazione scheduler...');
                
                // Verifica che le librerie Syncfusion siano caricate
                if (typeof ej === 'undefined' || typeof ej.schedule === 'undefined') {
                    throw new Error('Le librerie Syncfusion non sono caricate correttamente');
                }
                
                // Verifica che ci siano dati
                if (!centriLavoro || centriLavoro.length === 0) {
                    throw new Error('Nessun centro di lavoro disponibile');
                }
                
                console.log('Configurazione risorse e eventi...');
                
                // Configura le risorse (centri di lavoro)
                const resourceDataSource = centriLavoro.map(centro => ({
                    Id: centro.id || centro.Id,
                    Name: centro.name || centro.Name,
                    Color: centro.color || centro.Color
                }));

                console.log('Resources configurate per Syncfusion:', resourceDataSource);

                // Configura gli eventi (ordini) - solo se ci sono ordini
                const eventData = ordiniData ? ordiniData.map(ordine => ({
                    Id: ordine.id || ordine.Id,
                    Subject: ordine.subject || ordine.Subject,
                    StartTime: new Date(ordine.startTime || ordine.StartTime),
                    EndTime: new Date(ordine.endTime || ordine.EndTime),
                    RoomId: ordine.roomId || ordine.RoomId,
                    CategoryColor: ordine.categoryColor || ordine.CategoryColor,
                    Description: ordine.description || ordine.Description,
                    // Dati aggiuntivi
                    CodiceArticolo: ordine.codiceArticolo || ordine.CodiceArticolo,
                    Quantita: ordine.quantita || ordine.Quantita,
                    IdStato: ordine.idStato || ordine.IdStato,
                    StatoDescrizione: ordine.statoDescrizione || ordine.StatoDescrizione,
                    PercentualeCompletamento: ordine.percentualeCompletamento || ordine.PercentualeCompletamento
                })) : [];

                console.log('Eventi configurati per Syncfusion (primi 3):', eventData.slice(0, 3));
                console.log(`Configurazione completata: ${resourceDataSource.length} centri, ${eventData.length} eventi`);

            // Crea lo scheduler
            scheduleObj = new ej.schedule.Schedule({
                width: '100%',
                height: '100%',
                currentView: 'TimelineMonth',
                selectedDate: new Date(),
                eventSettings: {
                    dataSource: eventData,
                    fields: {
                        id: 'Id',
                        subject: { name: 'Subject' },
                        startTime: { name: 'StartTime' },
                        endTime: { name: 'EndTime' }
                    }
                },
                group: {
                    resources: ['Rooms']
                },
                resources: [{
                    field: 'RoomId',
                    title: 'Centro di Lavoro',
                    name: 'Rooms',
                    allowMultiple: false,
                    dataSource: resourceDataSource,
                    textField: 'Name',
                    idField: 'Id',
                    colorField: 'Color'
                }],
                views: [
                    { 
                        option: 'TimelineDay',
                        displayName: 'Giorno',
                        isSelected: false,
                        timeScale: {
                            enable: true,
                            interval: 60,  // 1 ora per vista giorno
                            slotCount: 1
                        }
                    },
                    { 
                        option: 'TimelineWeek',
                        displayName: 'Settimana',
                        isSelected: false,
                        timeScale: {
                            enable: true,
                            interval: 480,  // 8 ore per vista settimana
                            slotCount: 1
                        }
                    },
                    { 
                        option: 'TimelineWeek',
                        displayName: '2 Settimane',
                        isSelected: true,
                        interval: 2,
                        timeScale: {
                            enable: true,
                            interval: 480,  // 8 ore per vista 2 settimane
                            slotCount: 1
                        }
                    },
                    { 
                        option: 'TimelineMonth',
                        displayName: '4 Settimane',
                        isSelected: false,
                        interval: 4,
                        timeScale: {
                            enable: true,
                            interval: 480,  // 8 ore per vista 4 settimane
                            slotCount: 1
                        }
                    }
                ],
                // Configurazione per mostrare tutte le rooms
                timeScale: {
                    enable: true,
                    interval: 480,  // 8 ore (480 minuti)
                    slotCount: 1
                },
                workHours: {
                    highlight: false,  // Disabilita evidenziazione orari lavoro
                    start: '00:00',
                    end: '23:59'
                },
                // Configurazione per 24 ore
                startHour: '00:00',
                endHour: '23:59',
                // Formato ora 24h
                timeFormat: 'HH:mm',
                dateFormat: 'dd/MM/yyyy',
                // Mostra numero settimana
                showWeekNumber: true,
                // Configurazione altezza righe e eventi
                rowAutoHeight: true,  // Altezza automatica basata sul contenuto
                eventHeight: 60,      // Altezza minima eventi in pixel
                allowMultipleResource: false,  // Un evento per risorsa
                allowOverlap: true,    // Permetti sovrapposizione eventi
                allowQuickInfo: false, // Disabilita popup originali
                showQuickInfo: false,  // Disabilita quick info
                allowInline: false,    // Disabilita editing inline
                allowKeyboardInteraction: false, // Disabilita interazioni tastiera
                readonly: false,       // Mantieni modificabile via codice
                showHeaderBar: true,
                showTimeIndicator: true,
                // Configurazione per timeline
                headerRows: [
                    { 
                        option: 'Week',
                        template: '#weekHeaderTemplate'
                    },
                    { 
                        option: 'Date',
                        template: '#dayHeaderTemplate'
                    },
                    { 
                        option: 'Hour',
                        template: '#hourHeaderTemplate'
                    }
                ],
                // Event handlers
                eventRendered: onEventRendered,
                dragStop: onDragStop,
                resizeStop: onResizeStop,
                actionBegin: onActionBegin,
                dataBound: onDataBound
            });

            scheduleObj.appendTo('#scheduler');
            console.log('Scheduler creato con successo');
            } catch (error) {
                console.error('Errore nella creazione dello scheduler:', error);
                throw new Error(`Creazione scheduler: ${error.message}`);
            }
        }

        // Personalizza il rendering degli eventi
        function onEventRendered(args) {
            const eventData = args.data;
            
            // Applica il colore basato sullo stato
            if (eventData.CategoryColor) {
                args.element.style.backgroundColor = eventData.CategoryColor;
            }
            
            // Aggiungi barra di progressione personalizzata
            const percentuale = eventData.PercentualeCompletamento || 0;
            if (percentuale > 0) {
                const progressContainer = document.createElement('div');
                progressContainer.className = 'event-progress-container';
                progressContainer.style.cssText = `
                    position: absolute;
                    bottom: 3px;
                    left: 3px;
                    right: 3px;
                    height: 8px;
                    background: rgba(0,0,0,0.15);
                    border-radius: 4px;
                    overflow: hidden;
                    box-shadow: inset 0 1px 2px rgba(0,0,0,0.1);
                `;
                
                const progressBar = document.createElement('div');
                progressBar.className = 'event-progress-bar';
                progressBar.style.cssText = `
                    height: 100%;
                    width: ${percentuale}%;
                    background: linear-gradient(90deg, rgba(255,255,255,0.9), rgba(255,255,255,0.7));
                    border-radius: 4px;
                    transition: width 0.3s ease;
                    position: relative;
                `;
                
                // Barra di progressione bianca
                progressBar.style.background = 'rgba(255,255,255,0.9)';
                
                // Aggiungi un leggero effetto per eventi completati
                if (percentuale >= 100) {
                    progressBar.style.background = 'rgba(255,255,255,1)';
                    progressBar.style.boxShadow = '0 0 3px rgba(255,255,255,0.6)';
                }
                
                // Aggiungi testo percentuale se c'è spazio
                if (percentuale >= 20) {
                    const percentText = document.createElement('span');
                    percentText.style.cssText = `
                        position: absolute;
                        right: 4px;
                        top: 50%;
                        transform: translateY(-50%);
                        font-size: 0.7rem;
                        font-weight: bold;
                        color: rgba(0,0,0,0.7);
                        text-shadow: 0 1px 1px rgba(255,255,255,0.5);
                    `;
                    percentText.textContent = `${percentuale}%`;
                    progressContainer.appendChild(percentText);
                }
                
                progressContainer.appendChild(progressBar);
                args.element.appendChild(progressContainer);
            }

            // Aggiungi click listener diretto all'elemento
            args.element.style.cursor = 'pointer';
            args.element.style.pointerEvents = 'auto';
            
            // Rimuovi eventuali listener esistenti
            args.element.onclick = null;
            
            args.element.addEventListener('click', function(e) {
                console.log('=== CLICK EVENTO CATTURATO ===');
                console.log('Event target:', e.target);
                console.log('Event data:', eventData);
                console.log('Pointer events:', window.getComputedStyle(args.element).pointerEvents);
                
                e.preventDefault();
                e.stopPropagation();
                e.stopImmediatePropagation();
                
                // Apri il modal personalizzato
                openOrderDetailsModal(eventData);
                
                return false;
            }, true); // Use capture phase
            
            // Aggiungi anche un listener per mousedown come backup
            args.element.addEventListener('mousedown', function(e) {
                console.log('MouseDown su evento:', eventData.Id);
            });
        }

        // Gestisce il drag & drop
        async function onDragStop(args) {
            if (args.data && args.data.Id) {
                const idStato = args.data.IdStato || args.data.idStato;
                
                // Controllo aggiuntivo per sicurezza (non dovrebbe mai arrivare qui per stati bloccati)
                if (idStato === 3) {
                    showInfo('Gli ordini chiusi non possono essere spostati');
                    return;
                }
                
                if (idStato === 2) {
                    showInfo('Gli ordini in produzione non possono essere spostati. Usa il resize per modificare la durata');
                    return;
                }
                
                console.log('Drag completato per ordine:', args.data.Id);
                await updateOrdine(args.data.Id, args.data.StartTime, args.data.EndTime, args.data.RoomId);
            }
        }

        // Gestisce il resize
        async function onResizeStop(args) {
            if (args.data && args.data.Id) {
                const idStato = args.data.IdStato || args.data.idStato;
                
                // Controllo per ordini chiusi
                if (idStato === 3) {
                    showInfo('Gli ordini chiusi non possono essere modificati');
                    return;
                }
                
                console.log('Resize completato per ordine:', args.data.Id, 'Stato:', idStato);
                await updateOrdine(args.data.Id, args.data.StartTime, args.data.EndTime, args.data.RoomId);
            }
        }


        // Apre il modal con i dettagli dell'ordine
        function openOrderDetailsModal(eventData) {
            try {
                // Chiudi eventuali modal aperti
                const existingModals = document.querySelectorAll('.modal.show');
                existingModals.forEach(modal => {
                    const modalInstance = bootstrap.Modal.getInstance(modal);
                    if (modalInstance) {
                        modalInstance.hide();
                    }
                });
                
                // Rimuovi eventuali backdrop rimasti
                const backdrops = document.querySelectorAll('.modal-backdrop');
                backdrops.forEach(backdrop => backdrop.remove());
                
                // Ripristina scroll del body
                document.body.classList.remove('modal-open');
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
                
                console.log('Apertura modal per evento:', eventData.Id);
                // Popola i campi del form
                document.getElementById('orderIdListaOP').value = eventData.Id || '';
                document.getElementById('orderIdListaOPDisplay').value = eventData.Id || '';
                document.getElementById('orderCodiceArticolo').value = eventData.CodiceArticolo || '';
                document.getElementById('orderQuantita').value = eventData.Quantita || '';
                
                // Campi aggiuntivi
                document.getElementById('orderPriorita').value = eventData.Priorita || '2';
                document.getElementById('orderNote').value = eventData.Note || '';
                document.getElementById('orderDescrizione').value = eventData.Descrizione || '';
                
                // Formatta le date per input datetime-local
                if (eventData.StartTime) {
                    document.getElementById('orderDataInizio').value = formatDateTimeLocal(eventData.StartTime);
                }
                if (eventData.EndTime) {
                    document.getElementById('orderDataFine').value = formatDateTimeLocal(eventData.EndTime);
                }
                if (eventData.DataFinePrevista) {
                    document.getElementById('orderDataFinePrevista').value = formatDateTimeLocal(eventData.DataFinePrevista);
                }
                
                // Imposta centro di lavoro e stato
                document.getElementById('orderCentroLavoro').value = eventData.RoomId || '';
                document.getElementById('orderStato').value = eventData.IdStato || '';
                
                // Imposta percentuale completamento
                const percentuale = eventData.PercentualeCompletamento || 0;
                document.getElementById('orderPercentuale').value = percentuale;
                document.getElementById('orderPercentualeRange').value = percentuale;
                
                // Aggiorna il titolo del modal
                document.getElementById('orderDetailsModalLabel').innerHTML = 
                    `<i class="bi bi-box me-2"></i>Ordine: ${eventData.CodiceArticolo || 'N/A'}`;
                
                // Mostra il modal con configurazione senza backdrop
                const modalElement = document.getElementById('orderDetailsModal');
                const modal = new bootstrap.Modal(modalElement, {
                    backdrop: false,   // Nessun backdrop per evitare velatura
                    keyboard: true,    // Permetti chiusura con ESC
                    focus: true        // Focus automatico sul modal
                });
                
                // Aggiungi event listeners per la gestione del modal
                modalElement.addEventListener('shown.bs.modal', function() {
                    console.log('Modal aperto correttamente');
                    // Focus sul primo campo modificabile
                    const firstInput = modalElement.querySelector('input:not([readonly]):not([type="hidden"])');
                    if (firstInput) {
                        firstInput.focus();
                    }
                });
                
                modalElement.addEventListener('hidden.bs.modal', function() {
                    console.log('Modal chiuso');
                    // Assicurati che il body sia pulito
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = '';
                    document.body.style.paddingRight = '';
                    
                    // Rimuovi eventuali backdrop rimasti
                    const backdrops = document.querySelectorAll('.modal-backdrop');
                    backdrops.forEach(backdrop => backdrop.remove());
                });
                
                modal.show();
                
            } catch (error) {
                console.error('Errore nell\'apertura del modal:', error);
                showError('Errore nell\'apertura dei dettagli ordine');
            }
        }

        // Gestisce le azioni
        function onActionBegin(args) {
            // Previeni la creazione di nuovi eventi dal popup
            if (args.requestType === 'eventCreate') {
                args.cancel = true;
                showInfo('Per creare nuovi ordini, utilizzare la sezione Gestione Ordini');
                return;
            }
            
            // Controlla le regole di modifica basate sullo stato
            if (args.requestType === 'eventChange' && args.data) {
                const evento = args.data;
                const idStato = evento.IdStato || evento.idStato;
                
                console.log(`Tentativo modifica ordine ID: ${evento.Id}, Stato: ${idStato}`);
                
                // IdStato = 3 (Chiuso): NON modificabile
                if (idStato === 3) {
                    args.cancel = true;
                    showInfo('Gli ordini chiusi non possono essere modificati');
                    return;
                }
                
                // IdStato = 2 (In Produzione): Solo resize, NO spostamento
                if (idStato === 2) {
                    // Verifica se è un tentativo di spostamento (cambio di data/centro)
                    const originalEvent = ordiniData.find(o => (o.id || o.Id) === evento.Id);
                    if (originalEvent) {
                        const originalRoomId = originalEvent.roomId || originalEvent.RoomId;
                        const newRoomId = evento.RoomId || evento.roomId;
                        
                        // Se ha cambiato centro di lavoro, blocca
                        if (originalRoomId !== newRoomId) {
                            args.cancel = true;
                            showInfo('Gli ordini in produzione non possono essere spostati in altri centri di lavoro');
                            return;
                        }
                        
                        // Se ha cambiato la data di inizio, blocca (solo resize permesso)
                        const originalStart = new Date(originalEvent.startTime || originalEvent.StartTime);
                        const newStart = new Date(evento.StartTime || evento.startTime);
                        
                        if (originalStart.getTime() !== newStart.getTime()) {
                            args.cancel = true;
                            showInfo('Gli ordini in produzione possono solo essere allungati o accorciati, non spostati');
                            return;
                        }
                    }
                }
                
                console.log('Modifica permessa per ordine:', evento.Id);
            }
        }

        // Event handler per quando i dati sono stati caricati
        function onDataBound(args) {
            console.log('Scheduler data bound - tutte le rooms dovrebbero essere visibili');
            console.log(`Rooms configurate: ${centriLavoro.length}`);
            console.log(`Eventi caricati: ${ordiniData.length}`);
            
            // Verifica semplice delle risorse visibili
            setTimeout(() => {
                const resourceCells = document.querySelectorAll('.e-resource-cells');
                console.log(`Celle di risorse visibili: ${resourceCells.length}`);
                
                const resourceRows = document.querySelectorAll('.e-content-wrap .e-content-table tbody tr');
                console.log(`Righe di contenuto: ${resourceRows.length}`);
            }, 100);
        }

        // Aggiorna un ordine sul server
        async function updateOrdine(id, startTime, endTime, roomId) {
            try {
                showLoading(true);
                
                const response = await fetch('@Url.Action("UpdateOrdine", "Schedulatore")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify({
                        Id: id,
                        StartTime: startTime,
                        EndTime: endTime,
                        RoomId: roomId
                    })
                });

                const result = await response.json();
                
                if (response.ok && result.success) {
                    showSuccess('Ordine aggiornato con successo');
                } else {
                    throw new Error(result.message || 'Errore nell\'aggiornamento');
                }
            } catch (error) {
                console.error('Errore nell\'aggiornamento dell\'ordine:', error);
                showError('Errore nell\'aggiornamento dell\'ordine');
                
                // Ricarica i dati per ripristinare lo stato precedente
                await refreshData();
            } finally {
                showLoading(false);
            }
        }


        // Setup event listeners
        function setupEventListeners() {
            document.getElementById('refreshBtn').addEventListener('click', refreshData);
            document.getElementById('todayBtn').addEventListener('click', () => {
                if (scheduleObj) {
                    scheduleObj.selectedDate = new Date();
                }
            });
            
            // Listener per il resize della finestra
            window.addEventListener('resize', function() {
                if (scheduleObj) {
                    setTimeout(() => {
                        scheduleObj.refresh();
                    }, 100);
                }
            });

            // Setup modal event listeners
            setupModalEventListeners();
            
            // Popola dropdown centri di lavoro
            populateCentriLavoroDropdown();
            
            // Setup modal draggable
            setupModalDraggable();
        }

        // Setup event listeners per il modal
        function setupModalEventListeners() {
            // Sincronizza slider e input percentuale
            const rangeInput = document.getElementById('orderPercentualeRange');
            const numberInput = document.getElementById('orderPercentuale');
            
            if (rangeInput && numberInput) {
                rangeInput.addEventListener('input', function() {
                    numberInput.value = this.value;
                });
                
                numberInput.addEventListener('input', function() {
                    rangeInput.value = this.value;
                });
            }

            // Event listener per salvare le modifiche
            document.getElementById('saveOrderChanges')?.addEventListener('click', saveOrderChanges);
        }

        // Setup modal trascinabile
        function setupModalDraggable() {
            const modal = document.getElementById('orderDetailsModal');
            const modalDialog = modal.querySelector('.modal-dialog');
            const modalHeader = modal.querySelector('.modal-header');
            
            let isDragging = false;
            let startX, startY, startLeft, startTop;
            
            modalHeader.addEventListener('mousedown', function(e) {
                isDragging = true;
                startX = e.clientX;
                startY = e.clientY;
                
                const rect = modalDialog.getBoundingClientRect();
                startLeft = rect.left;
                startTop = rect.top;
                
                modalDialog.style.position = 'fixed';
                modalDialog.style.left = startLeft + 'px';
                modalDialog.style.top = startTop + 'px';
                modalDialog.style.margin = '0';
                
                document.addEventListener('mousemove', onMouseMove);
                document.addEventListener('mouseup', onMouseUp);
                
                e.preventDefault();
            });
            
            function onMouseMove(e) {
                if (!isDragging) return;
                
                const deltaX = e.clientX - startX;
                const deltaY = e.clientY - startY;
                
                const newLeft = startLeft + deltaX;
                const newTop = startTop + deltaY;
                
                // Limiti per non uscire dalla finestra
                const maxLeft = window.innerWidth - modalDialog.offsetWidth;
                const maxTop = window.innerHeight - modalDialog.offsetHeight;
                
                modalDialog.style.left = Math.max(0, Math.min(newLeft, maxLeft)) + 'px';
                modalDialog.style.top = Math.max(0, Math.min(newTop, maxTop)) + 'px';
            }
            
            function onMouseUp() {
                isDragging = false;
                document.removeEventListener('mousemove', onMouseMove);
                document.removeEventListener('mouseup', onMouseUp);
            }
            
            // Reset posizione quando il modal si chiude
            modal.addEventListener('hidden.bs.modal', function() {
                modalDialog.style.position = '';
                modalDialog.style.left = '';
                modalDialog.style.top = '';
                modalDialog.style.margin = '';
            });
        }

        // Salva le modifiche dell'ordine
        async function saveOrderChanges() {
            try {
                showLoading(true);
                
                const orderId = document.getElementById('orderIdListaOP').value;
                const quantita = document.getElementById('orderQuantita').value;
                const stato = document.getElementById('orderStato').value;
                const percentuale = document.getElementById('orderPercentuale').value;

                console.log('Salvataggio modifiche ordine:', {
                    Id: orderId,
                    Quantita: quantita,
                    Stato: stato,
                    Percentuale: percentuale
                });

                // Chiudi il modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('orderDetailsModal'));
                if (modal) modal.hide();

                // Aggiorna i dati dello scheduler
                await refreshData();
                
                showSuccess('Modifiche salvate con successo');

            } catch (error) {
                console.error('Errore nel salvataggio:', error);
                showError('Errore nel salvataggio delle modifiche');
            } finally {
                showLoading(false);
            }
        }

        // Ricarica i dati
        async function refreshData() {
            try {
                showLoading(true);
                await loadOrdiniProduzione();
                
                if (scheduleObj) {
                    const eventData = ordiniData.map(ordine => ({
                        Id: ordine.Id,
                        Subject: ordine.Subject,
                        StartTime: new Date(ordine.StartTime),
                        EndTime: new Date(ordine.EndTime),
                        RoomId: ordine.RoomId,
                        CategoryColor: ordine.CategoryColor,
                        Description: ordine.Description,
                        CodiceArticolo: ordine.CodiceArticolo,
                        Quantita: ordine.Quantita,
                        IdStato: ordine.IdStato,
                        StatoDescrizione: ordine.StatoDescrizione,
                        PercentualeCompletamento: ordine.PercentualeCompletamento
                    }));
                    
                    scheduleObj.eventSettings.dataSource = eventData;
                }
                
                showSuccess('Dati aggiornati');
            } catch (error) {
                console.error('Errore nel refresh dei dati:', error);
                showError('Errore nell\'aggiornamento dei dati');
            } finally {
                showLoading(false);
            }
        }

        // Utility functions
        function getCentroNome(centroId) {
            const centro = centriLavoro.find(c => c.Id === centroId);
            return centro ? centro.Name : 'Centro sconosciuto';
        }

        function showLoading(show) {
            const overlay = document.getElementById('loadingOverlay');
            overlay.style.display = show ? 'flex' : 'none';
        }

        // Formatta data per input datetime-local
        function formatDateTimeLocal(date) {
            if (!date) return '';
            
            const d = new Date(date);
            if (isNaN(d.getTime())) return '';
            
            // Formato: YYYY-MM-DDTHH:MM
            const year = d.getFullYear();
            const month = String(d.getMonth() + 1).padStart(2, '0');
            const day = String(d.getDate()).padStart(2, '0');
            const hours = String(d.getHours()).padStart(2, '0');
            const minutes = String(d.getMinutes()).padStart(2, '0');
            
            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        // Popola la dropdown dei centri di lavoro
        function populateCentriLavoroDropdown() {
            const select = document.getElementById('orderCentroLavoro');
            select.innerHTML = '<option value="">Seleziona Centro di Lavoro</option>';
            
            centriLavoro.forEach(centro => {
                const option = document.createElement('option');
                option.value = centro.Id;
                option.textContent = centro.Name;
                select.appendChild(option);
            });
        }

        function showSuccess(message) {
            // Implementa notifica di successo (puoi usare toast, alert, ecc.)
            console.log('Success:', message);
        }

        function showError(message) {
            // Implementa notifica di errore
            console.error('Error:', message);
            alert('Errore: ' + message);
        }

        function showInfo(message) {
            // Implementa notifica informativa
            console.info('Info:', message);
            alert('Info: ' + message);
        }
    </script>
}
